_context.invoke("Nittro.Extras.Dialogs",function(DOM,Arrays){var Dialog=_context.extend("Nittro.Object",function(options){if(Dialog.Super.call(this),this._.options=Arrays.mergeTree({},Dialog.getDefaults(this.constructor),options),this._.visible=!1,this._.scrollPosition=null,"string"==typeof this._.options.layer?this._.options.layer=DOM.getById(this._.options.layer):this._.options.layer||(this._.options.layer=document.body),this._.elms={holder:DOM.createFromHtml(this._.options.templates.holder),wrapper:DOM.createFromHtml(this._.options.templates.wrapper),content:null,buttons:null},this._.elms.holder.appendChild(this._.elms.wrapper),this._.options.classes&&DOM.addClass(this._.elms.holder,this._.options.classes),this._.options.content)this._.elms.content=this._.options.content,DOM.toggleClass(this._.elms.content,"nittro-dialog-content",!0),this._.options.content=null;else if(this._.options.text){this._.elms.content=DOM.createFromHtml(this._.options.templates.content);var content=DOM.create("p");content.textContent=this._.options.text,this._.elms.content.appendChild(content)}else this._.options.html&&(this._.elms.content=DOM.createFromHtml(this._.options.templates.content),DOM.html(this._.elms.content,this._.options.html));this._.elms.content&&this._.elms.wrapper.appendChild(this._.elms.content),this._.options.buttons&&(this._.options.buttons instanceof HTMLElement?(this._.elms.buttons=this._.options.buttons,DOM.toggleClass(this._.elms.buttons,"nittro-dialog-buttons",!0),this._.options.buttons=null):(this._.elms.buttons=DOM.createFromHtml(this._.options.templates.buttons),this._createButtons()),this._.elms.wrapper.appendChild(this._.elms.buttons),DOM.addListener(this._.elms.buttons,"click",this._handleButtons.bind(this))),this.on("button:default",function(){this.hide()}),this._.options.keyMap&&this._prepareKeymap(),DOM.addListener(this._.elms.holder,"touchmove",this._handleTouchScroll.bind(this)),this._.options.layer.appendChild(this._.elms.holder),this._handleKey=this._handleKey.bind(this),this._handleScroll=this._handleScroll.bind(this)},{STATIC:{defaults:{classes:null,content:null,html:null,text:null,buttons:null,keyMap:{},templates:{holder:'<div class="nittro-dialog-holder"></div>',wrapper:'<div class="nittro-dialog-inner"></div>',content:'<div class="nittro-dialog-content"></div>',buttons:'<div class="nittro-dialog-buttons"></div>',button:"<button></button>"},layer:null},getDefaults:function(type){var k,defaults={};do{if(type.defaults)for(k in type.defaults)type.defaults.hasOwnProperty(k)&&!defaults.hasOwnProperty(k)&&(defaults[k]=type.defaults[k]);type=type.Super}while(type&&type!==Dialog.Super);return defaults},setDefaults:function(options){Arrays.mergeTree(Dialog.defaults,options)}},isVisible:function(){return this._.visible},show:function(){this._.visible||(this._.visible=!0,this.trigger("show"),this._.keyMap&&DOM.addListener(document,"keydown",this._handleKey),this._.scrollLock={left:window.pageXOffset,top:window.pageYOffset},/ipod|ipad|iphone/i.test(navigator.userAgent)&&(this._.scrollPosition=window.pageYOffset,window.scrollTo(0,0),this._.scrollLock.left=0,this._.scrollLock.top=0),DOM.addListener(window,"scroll",this._handleScroll),DOM.addClass(this._.elms.holder,"visible"))},hide:function(){this._.visible&&(this._.visible=!1,this._.keyMap&&DOM.removeListener(document,"keydown",this._handleKey),DOM.removeListener(window,"scroll",this._handleScroll),/ipod|ipad|iphone/i.test(navigator.userAgent)&&(window.scrollTo(0,this._.scrollPosition),this._.scrollPosition=null),DOM.removeClass(this._.elms.holder,"visible"),this.trigger("hide"))},getElement:function(){return this._.elms.holder},getContent:function(){return this._.elms.content},getButtons:function(){return this._.elms.buttons},destroy:function(){this._.visible?(window.setTimeout(function(){this.destroy()}.bind(this),1e3),this.hide()):(this._.options.layer.removeChild(this._.elms.holder),this.off(),window.setTimeout(function(k){for(k in this._.elms)this._.elms[k]=null}.bind(this),10))},_createButtons:function(){var value,btn,def;for(value in this._.options.buttons)btn=DOM.createFromHtml(this._.options.templates.button),def=this._.options.buttons[value],"string"==typeof def&&(def={label:def,type:"button"}),DOM.setData(btn,"value",value),DOM.addClass(btn,"nittro-dialog-button","button"===def.type?"nittro-dialog-button-text":"nittro-dialog-button-plain"),btn.textContent=def.label,this._.elms.buttons.appendChild(btn)},_handleButtons:function(evt){var value=DOM.getData(evt.target,"value");value&&(evt.preventDefault(),this.trigger("button",{value:value}))},_prepareKeymap:function(){var v,k,keyMap={};for(v in this._.options.keyMap)k=this._.options.keyMap[v],k instanceof Array||(k=[k]),k.forEach(function(k){keyMap[k]=v});this._.keyMap=keyMap},_handleKey:function(evt){"textarea"!==evt.target.tagName.toLowerCase()&&evt.which in this._.keyMap&&(evt.preventDefault(),this.trigger("button",{value:this._.keyMap[evt.which]}))},_handleTouchScroll:function(evt){this._.elms.holder===evt.target&&evt.preventDefault()},_handleScroll:function(){window.scrollTo(this._.scrollLock.left,this._.scrollLock.top)}});_context.register(Dialog,"Dialog")},{DOM:"Utils.DOM",Arrays:"Utils.Arrays"}),_context.invoke("Nittro.Extras.Dialogs",function(Dialog,DOM,Arrays){var FormDialog=_context.extend(Dialog,function(options,formLocator){FormDialog.Super.call(this,options),this._.elms.form=this.getContent().getElementsByTagName("form").item(0),this._.formLocator=formLocator,this._.form=formLocator.getForm(this._.elms.form),DOM.addListener(this._.elms.form,"submit",this._handleSubmit.bind(this)),this.on("button",this._handleButton.bind(this)),this._.options.autoFocus&&this.on("show",this._autoFocus.bind(this))},{STATIC:{defaults:{classes:"nittro-dialog-form",hideOnSuccess:!0,autoFocus:!0,buttons:{confirm:"OK",cancel:{label:"Cancel",type:"text"}},keyMap:{confirm:13,cancel:27}},setDefaults:function(defaults){Arrays.mergeTree(FormDialog.defaults,defaults)}},setValues:function(values){return this._.form.setValues(values),this},reset:function(){return this._.form.reset(),this},getForm:function(){return this._.form},_handleSubmit:function(evt){evt.defaultPrevented||(this._.options.hideOnSuccess&&this.hide(),this.trigger("success"))},_handleButton:function(evt){"confirm"===evt.data.value?(evt.preventDefault(),this._.form.submit()):this._.form.reset()},_autoFocus:function(){try{this._.form.getElements().item(0).focus()}catch(e){}},destroy:function(){this._.formLocator.removeForm(this._.elms.form),FormDialog.Super.prototype.destroy.call(this)}});_context.register(FormDialog,"FormDialog")},{DOM:"Utils.DOM",Arrays:"Utils.Arrays"});